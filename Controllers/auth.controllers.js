import User from "../models/user.model.js";
import bcrypt from "bcryptjs";
import crypto from "crypto";
import {
  sendPasswordResetEmail,
  sendPasswordResetSuccessEmail,
  sendVerificationEmail,
  sendWelcomeEmail,
} from "../services/emailService.js";

import { generateTokenAndSetCookie } from "../utils/generateTokenAndSetCookie.js";

export const signup = async (req, res) => {
  const { email, password, name } = req.body;

  try {
    if (!email || !password || !name) {
      return res
        .status(400)
        .json({ success: false, message: "Tous les champs sont requis" });
    }

    const existingUser = await User.findOne({ email });
    if (existingUser) {
      return res
        .status(400)
        .json({ success: false, message: "Utilisateur d√©j√† existant" });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const verificationToken = Math.floor(
      100000 + Math.random() * 900000
    ).toString();

    const user = new User({
      email,
      password: hashedPassword,
      name,
      verificationToken,
      verificationExpiresAt: Date.now() + 24 * 60 * 60 * 1000, // Expiration apr√®s 24h
    });

    await user.save();
    //jwt
    generateTokenAndSetCookie(res, user);

    // Correction ici : passer arguments √† sendVerificationEmail
    await sendVerificationEmail(user.email, user.name, verificationToken);

    res.status(201).json({
      message: "Compte cr√©√© ! V√©rifiez votre email.",
      user: {
        id: user._id,
        name: user.name,
        email: user.email,
        role: user.role,
        isVerified: user.isVerified,
      },
    });
  } catch (error) {
    console.error("Erreur lors de l'inscription :", error.message);
    res.status(500).json({ message: "Erreur d'inscription", error });
  }
};

export const login = async (req, res) => {
  try {
    const { email, password } = req.body;

    // Step 1: Check if the user exists
    const user = await User.findOne({ email });
    if (!user) {
      return res
        .status(400)
        .json({ success: false, message: "Utilisateur non trouv√©." });
    }

    // Step 2: Check the password
    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      return res
        .status(400)
        .json({ success: false, message: "Mot de passe incorrect." });
    }

    // Step 4: Check the user's account status (etatCompte)
    if (user.etatCompte === "inactif") {
      return res.status(403).json({
        success: false,
        message:
          "Votre compte est inactif. Veuillez contacter l'administration.",
      });
    }

    if (user.etatCompte === "suspendu") {
      return res.status(403).json({
        success: false,
        message:
          "Votre compte a √©t√© suspendu. Veuillez contacter l'administration.",
      });
    }

    // Step 5: Generate the token and set it in a cookie
    generateTokenAndSetCookie(res, user);

    // Step 6: Update last login date
    user.lastLogin = new Date();
    await user.save();

    // Step 7: Return the user info (excluding password)
    res.status(200).json({
      success: true,
      message: "Vous √™tes connect√© !",
      user: {
        id: user._id || user.id,
        name: user.name,
        email: user.email,
        role: user.role,
        isVerified: user.isVerified,
        lastLogin: user.lastLogin,
        etatCompte: user.etatCompte, // Include account status in the response
      },
    });
  } catch (error) {
    console.error("Erreur lors de la connexion :", error);
    res.status(500).json({
      success: false,
      message: "Erreur lors de la connexion",
      error: error.message,
    });
  }
};

export const logout = async (req, res) => {
  res.clearCookie("token");
  res.status(200).json({ success: true, message: "D√©connexion r√©ussie !" });
};

export const verifyEmail = async (req, res) => {
  const { code } = req.body;
  console.log("Code re√ßu :", code); // üëà V√©rifie bien qu'il arrive

  try {
    console.log("Code re√ßu :", code);
    console.log("Date actuelle :", new Date());
    const codeStr = String(code).trim();
    console.log("üîç Code nettoy√© :", codeStr);

    const user = await User.findOne({
      verificationToken: codeStr,
      verificationExpiresAt: { $gt: Date.now() },
    });
    console.log("Sans date, utilisateur trouv√© ?", user);
    console.log("Utilisateur trouv√© :", user); // üëà V√©rifie si un user est trouv√©

    if (!user) {
      return res.status(400).json({
        success: false,
        message: "Code de v√©rification invalide ou expir√©.",
      });
    }

    // Marquer l'utilisateur comme v√©rifi√©
    user.isVerified = true;
    user.verificationToken = undefined;
    user.verificationExpiresAt = undefined;

    await user.save();

    // Envoi de l'email de bienvenue
    await sendWelcomeEmail(user.email, user.name);
    console.log("üë§ User before token:", user);
    console.log("üìõ Name:", user.name, "| üé≠ Role:", user.role);

    // üîê G√©n√©rer un token JWT et le stocker dans un cookie
    generateTokenAndSetCookie(res, user);

    // R√©ponse avec succ√®s sans mot de passe
    const { password, ...userData } = user._doc;

    res.status(200).json({
      success: true,
      message: "Email v√©rifi√© avec succ√®s.",
      user: {
        id: user._id,
        name: user.name,
        email: user.email,
        role: user.role,
        isVerified: user.isVerified,
      },
    });
  } catch (error) {
    console.error("Erreur lors de la v√©rification de l'email:", error);
    res.status(500).json({
      success: false,
      message: "Erreur serveur lors de la v√©rification.",
    });
  }
};
export const resendVerificationCode = async (req, res) => {
  const { email } = req.body;

  try {
    // 1. Trouver l'utilisateur par email
    const user = await User.findOne({ email });

    if (!user) {
      return res.status(404).json({
        success: false,
        message: "Aucun utilisateur trouv√© avec cet email.",
      });
    }

    // 2. V√©rifier s‚Äôil est d√©j√† v√©rifi√©
    if (user.isVerified) {
      return res.status(400).json({
        success: false,
        message: "Cet utilisateur est d√©j√† v√©rifi√©.",
      });
    }

    // 3. G√©n√©rer un nouveau code
    const verificationToken = Math.floor(
      100000 + Math.random() * 900000
    ).toString();
    const expiresIn = 10 * 60 * 1000; // 10 minutes

    user.verificationToken = verificationToken;
    user.verificationExpiresAt = Date.now() + expiresIn;

    // 4. Sauvegarder les nouvelles infos
    await user.save();

    // 5. Envoyer le code par email
    await sendVerificationEmail(user.email, user.name, verificationToken);

    // 6. R√©pondre avec succ√®s
    res.status(200).json({
      success: true,
      message: "Nouveau code envoy√© avec succ√®s. V√©rifie ton email !",
    });

  } catch (error) {
    console.error("Erreur lors du renvoi du code :", error);
    res.status(500).json({
      success: false,
      message: "Une erreur est survenue. R√©essaie plus tard.",
    });
  }
};


export const forgotpassword = async (req, res) => {
  const { email } = req.body;

  try {
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(400).json({ message: "Adresse email inconnue" });
    }

    // G√©n√©ration du token
    const resetToken = crypto.randomBytes(20).toString("hex");
    console.log("Reset Token:", resetToken);

    const resetTokenExpiredsAt = Date.now() + 1 * 60 * 60 * 1000; // 1 heure
    user.resetPasswordToken = resetToken;
    user.resetPasswordExpiresAt = resetTokenExpiredsAt;
    await user.save();
    console.log("User apr√®s save:", user);

    // V√©rification de BASE_URL
    console.log("BASE_URL:", process.env.BASE_URL); // DEBUG

    // Envoi de l'email
    const resetLink = `${process.env.BASE_URL}/reset-password?token=${resetToken}`;
    console.log("Reset Link: mta3 auth controller", resetLink); // DEBUG

    await sendPasswordResetEmail(user.email, user.name, resetToken);

    res.status(200).json({
      message: "Un email de r√©initialisation de mot de passe a √©t√© envoy√©",
    });
  } catch (error) {
    console.error("Erreur dans forgotpassword:", error);
    res.status(500).json({ success: false, message: error.message });
  }
};
//resetPassword
export const resetPassword = async (req, res) => {
  try {
    const { token } = req.params;
    const { password: newPassword } = req.body;

    console.log("Corps de la requ√™te:", req.body);
    console.log("token:", token);
    console.log("newPassword:", newPassword);

    if (!newPassword) {
      return res.status(400).json({
        success: false,
        message: "Le nouveau mot de passe est requis !",
      });
    }

    // V√©rification du token
    const user = await User.findOne({
      resetPasswordToken: token,
      resetPasswordExpiresAt: { $gt: Date.now() },
    });

    if (!user) {
      return res.status(400).json({
        success: false,
        message:
          "Token de r√©initialisation de mot de passe expir√© ou invalide.",
      });
    }

    // Mise √† jour du mot de passe
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    user.password = hashedPassword;
    user.resetPasswordToken = undefined;
    user.resetPasswordExpiresAt = undefined;

    await user.save();
    await sendPasswordResetSuccessEmail(user.email, user.name);

    res
      .status(200)
      .json({ success: true, message: "Mot de passe mis √† jour avec succ√®s." });
  } catch (error) {
    console.error("Erreur dans resetPassword:", error);
    res
      .status(500)
      .json({ success: false, message: "Erreur interne du serveur" });
  }
};
export const checkAuth = async (req, res) => {
  try {
    const userId = req.user?.id; // r√©cup√®re le userId inject√© par le middleware

    if (!userId) {
      return res
        .status(401)
        .json({ success: false, message: "Utilisateur non authentifi√©" });
    }

    const user = await User.findById(userId).select("-password");

    if (!user) {
      return res
        .status(404)
        .json({ success: false, message: "Utilisateur non trouv√©" });
    }

    return res.status(200).json({ success: true, user });
  } catch (error) {
    console.error(" Erreur dans checkAuth:", error);
    return res.status(500).json({
      success: false,
      message: "Erreur serveur",
      error: error.message,
    });
  }
};
// Mise √† jour du profil utilisateur

export const updateUserProfile = async (req, res) => {
  try {
    const user = await User.findById(req.user.id);
    console.log("Utilisateur trouv√© dans la requ√™te:", req.user);

    if (!user) {
      return res
        .status(404)
        .json({ success: false, message: "Utilisateur non trouv√©" });
    }

    user.name = req.body.name || user.name;
    user.email = req.body.email || user.email;

    if (req.body.password) {
      user.password = await bcrypt.hash(req.body.password, 10);
    }

    // Mise √† jour de la date de modification
    user.lastupdate = new Date();

    await user.save();

    // Renvoie un nouveau token avec les donn√©es actuelles
    generateTokenAndSetCookie(res, user);

    res.status(200).json({
      success: true,
      message: "Profil mis √† jour avec succ√®s!",
      user: {
        id: user._id,
        name: user.name,
        email: user.email,
        role: user.role,
        isVerified: user.isVerified,
        lastupdate: user.lastupdate,
      },
    });
  } catch (error) {
    console.error(" Erreur dans updateUserProfile:", error);
    return res.status(500).json({
      success: false,
      message: "Erreur serveur",
      error: error.message,
    });
  }
};
